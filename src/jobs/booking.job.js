const { Booking } = require('../models');
const { Op } = require('sequelize');

/**
 * ========================================
 * CRON JOB: AUTO-CANCEL EXPIRED BOOKINGS
 * ========================================
 * T·ª± ƒë·ªông h·ªßy c√°c booking ƒë√£ qu√° scheduled_time m√† v·∫´n c√≤n pending
 * 
 * Ch·∫°y: M·ªói 5 ph√∫t
 * Logic: N·∫øu booking.status = 'pending' && now > scheduled_time ‚Üí status = 'cancelled'
 */
async function cancelExpiredBookings() {
  try {
    const now = new Date();
    
    console.log('\nüîÑ ========== CRON JOB: Cancel Expired Bookings ==========');
    console.log(`‚è∞ Running at: ${now.toLocaleString('vi-VN')}`);
    console.log(`üìÖ Checking bookings with scheduled_time < ${now.toISOString()}`);
    
    // T√¨m t·∫•t c·∫£ booking c√≥:
    // - status = 'pending'
    // - scheduled_time < now (ƒë√£ qu√° h·∫°n)
    const [updatedCount] = await Booking.update(
      { 
        status: 'cancelled'
      },
      {
        where: {
          status: 'pending',
          scheduled_time: {
            [Op.lt]: now // scheduled_time < now
          }
        }
      }
    );
    
    if (updatedCount > 0) {
      console.log(`‚úÖ Successfully cancelled ${updatedCount} expired booking(s)`);
      
      // Log chi ti·∫øt c√°c booking ƒë√£ b·ªã cancel
      const cancelledBookings = await Booking.findAll({
        where: {
          status: 'cancelled',
          scheduled_time: {
            [Op.lt]: now,
            [Op.gte]: new Date(now - 5 * 60000) // Trong v√≤ng 5 ph√∫t v·ª´a r·ªìi
          }
        },
        attributes: ['booking_id', 'driver_id', 'vehicle_id', 'station_id', 'scheduled_time'],
        limit: 10
      });
      
      cancelledBookings.forEach(booking => {
        console.log(`   üì¶ Booking ID: ${booking.booking_id}`);
        console.log(`      Driver: ${booking.driver_id}`);
        console.log(`      Vehicle: ${booking.vehicle_id}`);
        console.log(`      Scheduled Time: ${booking.scheduled_time.toLocaleString('vi-VN')}`);
      });
    } else {
      console.log(`‚ÑπÔ∏è  No expired bookings found`);
    }
    
    console.log('========== CRON JOB COMPLETED ==========\n');
    
    return {
      success: true,
      cancelledCount: updatedCount,
      timestamp: now
    };
    
  } catch (error) {
    console.error('‚ùå ERROR in cancelExpiredBookings cron job:', error);
    console.error('Stack trace:', error.stack);
    
    return {
      success: false,
      error: error.message,
      timestamp: new Date()
    };
  }
}

module.exports = {
  cancelExpiredBookings
};
